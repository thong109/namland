// This file is auto-generated by @hey-api/openapi-ts

export const AdBannerPositionEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const AdBannerSearchQueryDtoSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        position: {
            '$ref': '#/components/schemas/AdBannerPositionEnum'
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AgendaEventSchema = {
    type: 'object',
    properties: {
        dateTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        dateTimeEnd: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        action: {
            type: 'string',
            nullable: true
        },
        actionEN: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AgreementInfoDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/OwnerServiceAgreementEnum'
        },
        commission: {
            type: 'number',
            format: 'double'
        },
        startDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        endDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AppAccountExtraInfoSchema = {
    type: 'object',
    properties: {
        address: {
            type: 'string',
            nullable: true
        },
        taxCode: {
            type: 'string',
            nullable: true
        },
        taxCodeDateOfIssue: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        taxCodePlaceOfIssue: {
            type: 'string',
            nullable: true
        },
        businessLicense: {
            type: 'string',
            nullable: true
        },
        blDateOfIssue: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        blPlaceOfIssue: {
            type: 'string',
            nullable: true
        },
        companyName: {
            type: 'string',
            nullable: true
        },
        companyAddress: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AppAccountMarkActiveInputDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const AppAccountShowOnHomeInputDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        isShowOnHome: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const AuthenticateModelSchema = {
    type: 'object',
    properties: {
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        isSocial: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const BookingSchema = {
    required: ['cartId', 'mainCustomer'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        code: {
            type: 'string',
            nullable: true
        },
        eventId: {
            type: 'string',
            nullable: true
        },
        cartId: {
            minLength: 1,
            type: 'string'
        },
        property: {
            '$ref': '#/components/schemas/Property'
        },
        status: {
            type: 'string',
            nullable: true
        },
        cancelledNote: {
            type: 'string',
            nullable: true
        },
        cancelledDepositNote: {
            type: 'string',
            nullable: true
        },
        mainCustomer: {
            '$ref': '#/components/schemas/Booking_Customer'
        },
        subCustomers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Booking_Customer'
            },
            nullable: true
        },
        wS_Customer: {
            '$ref': '#/components/schemas/Booking_Customer'
        },
        wS_SubCustomers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Booking_Customer'
            },
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        isDelete: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        createdByName: {
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        documentUrls: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        prescribedDepositAmount: {
            type: 'number',
            format: 'double'
        },
        totalDepositAmount: {
            type: 'number',
            format: 'double'
        },
        totalApprovedDepositAmount: {
            type: 'number',
            format: 'double'
        },
        cartName: {
            type: 'string',
            nullable: true
        },
        eventName: {
            type: 'string',
            nullable: true
        },
        ticketStatus: {
            type: 'string',
            nullable: true
        },
        source: {
            type: 'string',
            nullable: true
        },
        expiredAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        despositAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        paidDeposit: {
            type: 'boolean'
        },
        paymentMethod: {
            type: 'string',
            nullable: true
        },
        paymentUrl: {
            type: 'string',
            nullable: true
        },
        paymentMethods: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        paymentOrderFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        haveNewPO: {
            type: 'boolean'
        },
        totalPrice: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        exchangeRate: {
            type: 'number',
            format: 'double'
        },
        haveContract: {
            type: 'boolean'
        },
        wS_ContractStatus: {
            type: 'string',
            nullable: true
        },
        wS_CustomerSignedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        wS_PMHSignedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        wS_ContractCode: {
            type: 'string',
            nullable: true
        },
        wS_ContractNumber: {
            type: 'string',
            nullable: true
        },
        newCustomer: {
            nullable: true
        },
        wS_TransferCode: {
            type: 'string',
            nullable: true
        },
        packageIndex: {
            type: 'string',
            nullable: true
        },
        depositFormCode: {
            type: 'string',
            nullable: true
        },
        wS_NewCustomerCode: {
            type: 'string',
            nullable: true
        },
        documentUrls_UpdateProperty: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        documentUrls_UpdateProperty_Data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdateDataWithFiles'
            },
            nullable: true
        },
        documentUrls_UpdateProperty_NewData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BookingFile'
            },
            nullable: true
        },
        documentUrls_UpdateCustomer: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        documentUrls_UpdateCustomer_Data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdateDataWithFiles'
            },
            nullable: true
        },
        documentUrls_UpdateCustomer_NewData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BookingFile'
            },
            nullable: true
        },
        documentUrls_UpdateSaleProgram: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        documentUrls_UpdateSaleProgram_Data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdateDataWithFiles'
            },
            nullable: true
        },
        documentUrls_UpdateSaleProgram_NewData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BookingFile'
            },
            nullable: true
        },
        isConfirmSignDeposit: {
            type: 'boolean'
        },
        confirmSignDepositDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        salePrograms: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        saleProgramsInfo: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SaleProgram'
            },
            nullable: true
        },
        confirmSignDepositFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        isSendConfirmDepositForm: {
            type: 'boolean'
        },
        lastestBookingDepositId: {
            type: 'string',
            nullable: true
        },
        confirmSignDepositExpired: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        canConfirmSignDeposit: {
            type: 'boolean',
            readOnly: true
        },
        properties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Property'
            },
            nullable: true
        },
        handoverDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        draftId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const BookingFileSchema = {
    required: ['bookingId', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        bookingId: {
            minLength: 1,
            type: 'string'
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        note: {
            type: 'string',
            nullable: true
        },
        files: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Booking_CustomerSchema = {
    type: 'object',
    properties: {
        customerEventId: {
            type: 'string',
            nullable: true
        },
        customerEventStatus: {
            type: 'string',
            nullable: true
        },
        qrCode: {
            type: 'string',
            nullable: true
        },
        parentQRCode: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        },
        code: {
            type: 'string',
            nullable: true
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        fullName: {
            type: 'string',
            nullable: true
        },
        fullNameView: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        birthday: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        identityCard: {
            type: 'string',
            nullable: true
        },
        icDateOfIssue: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        icPlaceOfIssue: {
            type: 'string',
            nullable: true
        },
        contactAddress: {
            type: 'string',
            nullable: true
        },
        permanentAddress: {
            type: 'string',
            nullable: true
        },
        nationality: {
            type: 'string',
            nullable: true
        },
        category: {
            type: 'string',
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        agencyId: {
            type: 'string',
            nullable: true
        },
        salesmanId: {
            type: 'string',
            nullable: true
        },
        groupId: {
            type: 'string',
            nullable: true
        },
        agencyName: {
            type: 'string',
            nullable: true
        },
        salesmanCode: {
            type: 'string',
            nullable: true
        },
        salesmanName: {
            type: 'string',
            nullable: true
        },
        salesmanNickName: {
            type: 'string',
            nullable: true
        },
        groupName: {
            type: 'string',
            nullable: true
        },
        customerType: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        companyName: {
            type: 'string',
            nullable: true
        },
        companyAddress: {
            type: 'string',
            nullable: true
        },
        taxCode: {
            type: 'string',
            nullable: true
        },
        businessLicense: {
            type: 'string',
            nullable: true
        },
        blDateOfIssue: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        blPlaceOfIssue: {
            type: 'string',
            nullable: true
        },
        sourceId: {
            type: 'string',
            nullable: true
        },
        haveForeignPhone: {
            type: 'boolean'
        },
        foreignPhone: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ChangePasswordModelSchema = {
    required: ['newPassword', 'oldPassword'],
    type: 'object',
    properties: {
        oldPassword: {
            minLength: 1,
            type: 'string',
            format: 'password'
        },
        newPassword: {
            maxLength: 100,
            minLength: 6,
            type: 'string',
            format: 'password'
        },
        confirmPassword: {
            type: 'string',
            format: 'password',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ChatMessageQueryInputDtoSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        conversationId: {
            type: 'string',
            nullable: true
        },
        moduleId: {
            '$ref': '#/components/schemas/EnumModuleNames'
        }
    },
    additionalProperties: false
} as const;

export const ContactCreateDtoSchema = {
    required: ['clientName', 'phone', 'submitTo'],
    type: 'object',
    properties: {
        submitTo: {
            minLength: 1,
            type: 'string'
        },
        clientName: {
            minLength: 1,
            type: 'string'
        },
        phone: {
            minLength: 1,
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        message: {
            maxLength: 2000,
            minLength: 0,
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ContactDetailRequestSchema = {
    type: 'object',
    properties: {
        ownerName: {
            type: 'string',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        companyName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ContactUpdateDtoSchema = {
    required: ['clientName', 'id', 'phone'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        clientName: {
            minLength: 1,
            type: 'string'
        },
        phone: {
            minLength: 1,
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        message: {
            maxLength: 2000,
            minLength: 0,
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ContactUsCreateDtoSchema = {
    required: ['clientName', 'phone'],
    type: 'object',
    properties: {
        clientName: {
            minLength: 1,
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        message: {
            maxLength: 2000,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        phone: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateDescriptionTranslationRequestSchema = {
    required: ['language', 'value'],
    type: 'object',
    properties: {
        language: {
            minLength: 1,
            type: 'string'
        },
        value: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateKeywordBlacklistInputDtoSchema = {
    required: ['value'],
    type: 'object',
    properties: {
        value: {
            maxLength: 250,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateLARequestSchema = {
    required: ['personInChargeId'],
    type: 'object',
    properties: {
        personInChargeId: {
            minLength: 1,
            type: 'string'
        },
        inquiryDetail: {
            '$ref': '#/components/schemas/InquiryDetailRequest'
        },
        contactDetail: {
            '$ref': '#/components/schemas/ContactDetailRequest'
        },
        leaseExecution: {
            '$ref': '#/components/schemas/LeaseExecutionRequest'
        },
        payment: {
            '$ref': '#/components/schemas/PaymentRequest'
        }
    },
    additionalProperties: false
} as const;

export const CreateListingPackageRequestSchema = {
    required: ['package', 'packageType', 'type'],
    type: 'object',
    properties: {
        package: {
            '$ref': '#/components/schemas/ListingPackageEnum'
        },
        packageType: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        },
        point: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/ListingPackageStatusEnum'
        },
        numberOfPush: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        percentDecrease: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const CreateListingRequestSchema = {
    required: ['bedrooms', 'description', 'listingCategoryId', 'location', 'posterRoleCode', 'priceVnd', 'priceVndM2', 'projectId', 'size', 'title', 'type'],
    type: 'object',
    properties: {
        title: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateListingTranslationRequest'
            }
        },
        description: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateListingTranslationRequest'
            }
        },
        priceVnd: {
            type: 'number',
            format: 'double'
        },
        priceVndM2: {
            type: 'number',
            format: 'double'
        },
        size: {
            type: 'number',
            format: 'double'
        },
        unitId: {
            type: 'string',
            nullable: true
        },
        isShowUnitCode: {
            type: 'boolean'
        },
        listingCategoryId: {
            minLength: 1,
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        },
        status: {
            '$ref': '#/components/schemas/ListingStatusEnum'
        },
        bedrooms: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        bathrooms: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int32',
            default: 1,
            nullable: true
        },
        expectedPublishingDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        handOverStatus: {
            '$ref': '#/components/schemas/HandOverStatusEnum'
        },
        legalStatus: {
            '$ref': '#/components/schemas/LegalStatusEnum'
        },
        viewsIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        projectId: {
            minLength: 1,
            type: 'string'
        },
        location: {
            '$ref': '#/components/schemas/LocationRequest'
        },
        videoLink: {
            type: 'string',
            nullable: true
        },
        virtualTour: {
            type: 'string',
            nullable: true
        },
        displayPriceType: {
            '$ref': '#/components/schemas/DisplayPriceTypeEnum'
        },
        posterRoleCode: {
            minLength: 1,
            type: 'string'
        },
        interiorId: {
            type: 'string',
            nullable: true
        },
        blockTower: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        floor: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        inDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        outDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        nearBy: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        priorityStatus: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        autoPushDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        leaseTerm: {
            '$ref': '#/components/schemas/ListingLeaseTermEnum'
        },
        isPetAllowance: {
            type: 'boolean',
            nullable: true
        },
        managementFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        isIncludeManagementFee: {
            type: 'boolean',
            nullable: true
        },
        canMoveInAfter: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        imageIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateListingTranslationRequestSchema = {
    required: ['language', 'value'],
    type: 'object',
    properties: {
        language: {
            minLength: 1,
            type: 'string'
        },
        value: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberPackageRequestSchema = {
    type: 'object',
    properties: {
        listingPackageId: {
            type: 'integer',
            format: 'int64'
        },
        listingPushPackageId: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        totalPoint: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberPushRequestInputDtoSchema = {
    type: 'object',
    properties: {
        listingPushPackageId: {
            type: 'integer',
            format: 'int64'
        },
        totalPoint: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const CreateOSARequestSchema = {
    required: ['personInChargeId'],
    type: 'object',
    properties: {
        ownerServiceAgreementId: {
            type: 'string',
            nullable: true
        },
        ownerInquiryId: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ownerInfo: {
            '$ref': '#/components/schemas/OwnerInfoDto'
        },
        propertyInfo: {
            '$ref': '#/components/schemas/PropertyInfoDto'
        },
        agreementInfo: {
            '$ref': '#/components/schemas/AgreementInfoDto'
        },
        personInChargeId: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateOrUpdateInquiryRequestSchema = {
    type: 'object',
    properties: {
        listingId: {
            type: 'string',
            nullable: true
        },
        inquiryId: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        imageIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateOwnerInquiryRequestSchema = {
    required: ['clientName', 'email', 'phone'],
    type: 'object',
    properties: {
        clientName: {
            minLength: 1,
            type: 'string'
        },
        phone: {
            maxLength: 13,
            minLength: 1,
            type: 'string',
            format: 'tel'
        },
        email: {
            maxLength: 255,
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        message: {
            maxLength: 1000,
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateProjectRequestSchema = {
    required: ['code', 'location', 'name'],
    type: 'object',
    properties: {
        code: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        descriptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateDescriptionTranslationRequest'
            },
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        managedBy: {
            type: 'string',
            nullable: true
        },
        owner: {
            type: 'string',
            nullable: true
        },
        yearBuited: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        handOverYear: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        totalArea: {
            type: 'number',
            format: 'double'
        },
        isActive: {
            type: 'boolean'
        },
        numberOfFloor: {
            type: 'integer',
            format: 'int32'
        },
        numberOfUnit: {
            type: 'integer',
            format: 'int32'
        },
        location: {
            '$ref': '#/components/schemas/LocationRequest'
        },
        indoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        outdoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        nearBy: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        unitTypeRentIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        unitTypeSellIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        imageIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        imageLogoId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateSearchLocationRequestSchema = {
    required: ['district', 'materialPlaces', 'province', 'status', 'type'],
    type: 'object',
    properties: {
        province: {
            minLength: 1,
            type: 'string'
        },
        district: {
            minLength: 1,
            type: 'string'
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        status: {
            type: 'boolean'
        },
        materialPlaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MaterialPlaceRequest'
            }
        }
    },
    additionalProperties: false
} as const;

export const CreateUnitDescriptionTranslationRequestSchema = {
    required: ['language', 'value'],
    type: 'object',
    properties: {
        language: {
            minLength: 1,
            type: 'string'
        },
        value: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateUnitRequestSchema = {
    required: ['projectId'],
    type: 'object',
    properties: {
        projectId: {
            minLength: 1,
            type: 'string'
        },
        typeId: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/UnitStatus'
        },
        viewId: {
            type: 'string',
            nullable: true
        },
        unitNo: {
            type: 'string',
            nullable: true
        },
        area: {
            type: 'number',
            format: 'double'
        },
        floor: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateUnitDescriptionTranslationRequest'
            },
            nullable: true
        },
        unitMothlyMgtFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        unitYearBuild: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        unitOutdoorSpace: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeleteFileSchema = {
    required: ['id', 'url'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        url: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DeleteMaterialPlaceRequestSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeleteOtpModelSchema = {
    type: 'object',
    properties: {
        verifyCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeviceRequestSchema = {
    type: 'object',
    properties: {
        deviceToken: {
            type: 'string',
            nullable: true
        },
        deviceCode: {
            type: 'string',
            nullable: true
        },
        deviceTypeId: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const DisplayPriceTypeEnumSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const EducationLevelSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const ElasticSearchQuerySchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        query: {
            nullable: true
        },
        sort: {
            '$ref': '#/components/schemas/ElasticSearchSort'
        },
        source: {
            '$ref': '#/components/schemas/Source'
        },
        priorityStatus: {
            '$ref': '#/components/schemas/ListPriorityStatusEnum'
        }
    },
    additionalProperties: false
} as const;

export const ElasticSearchSortSchema = {
    type: 'object',
    properties: {
        field: {
            type: 'string',
            nullable: true
        },
        sortOrder: {
            '$ref': '#/components/schemas/SortOrder'
        }
    },
    additionalProperties: false
} as const;

export const EmploymentStatusSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const EnumFeePaymentChannelSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6],
    type: 'integer',
    format: 'int32'
} as const;

export const EnumModuleNamesSchema = {
    enum: [0, 1, 2, 3, 4, 50, 51, 100],
    type: 'integer',
    format: 'int32'
} as const;

export const EnumOrderStatusSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6],
    type: 'integer',
    format: 'int32'
} as const;

export const EnumOwnershipTypeNamesSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const EventTimeline_PeriodSchema = {
    type: 'object',
    properties: {
        period: {
            type: 'string',
            nullable: true
        },
        quota: {
            type: 'integer',
            format: 'int64'
        },
        remain: {
            type: 'integer',
            format: 'int64'
        },
        periods: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const Event_TimelineSchema = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            format: 'date-time'
        },
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventTimeline_Period'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExportAppAccountRequestSchema = {
    type: 'object',
    properties: {
        keyword: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExportCashAdvanceRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        keyword: {
            type: 'string',
            nullable: true
        },
        cashAdvanceId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExportTopUpRequestSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FeeTopUpStatusEnum'
            },
            nullable: true
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        keyword: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExportTransactionRequestSchema = {
    type: 'object',
    properties: {
        keyword: {
            type: 'string',
            nullable: true
        },
        packageType: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        }
    },
    additionalProperties: false
} as const;

export const ExternalAuthenticateModelSchema = {
    required: ['authProvider', 'providerAccessCode', 'providerKey'],
    type: 'object',
    properties: {
        authProvider: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        },
        providerKey: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        providerAccessCode: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const FeeTopUpStatusEnumSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const FileInforSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HandOverStatusEnumSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const IncomeRangeSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7, 8],
    type: 'integer',
    format: 'int32'
} as const;

export const InquiryCreateDtoSchema = {
    required: ['listingId'],
    type: 'object',
    properties: {
        listingId: {
            minLength: 1,
            type: 'string'
        },
        clientName: {
            type: 'string',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        ticketStatus: {
            '$ref': '#/components/schemas/InquiryStatusEnum'
        },
        visitDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const InquiryDetailRequestSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        projectId: {
            type: 'string',
            nullable: true
        },
        unitId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const InquiryStatusEnumSchema = {
    enum: [0, 1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const InquiryTypeEnumSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const InquiryUpdateDtoSchema = {
    required: ['id', 'ticketStatus', 'title'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        ticketStatus: {
            '$ref': '#/components/schemas/InquiryStatusEnum'
        }
    },
    additionalProperties: false
} as const;

export const InquiryUpdateStatusDtoSchema = {
    required: ['id', 'ticketStatus'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        ticketStatus: {
            '$ref': '#/components/schemas/InquiryStatusEnum'
        }
    },
    additionalProperties: false
} as const;

export const LADepositStatusEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const LAPaymentTermEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const LAStatusEnumSchema = {
    enum: [1, 2, 3, 4, 5, 6],
    type: 'integer',
    format: 'int32'
} as const;

export const LeaseExecutionRequestSchema = {
    required: ['contractNumber', 'laCommencementDate', 'laExpirationDate', 'laStatus', 'rent', 'rentIncludeVAT'],
    type: 'object',
    properties: {
        contractNumber: {
            minLength: 1,
            type: 'string'
        },
        laStatus: {
            '$ref': '#/components/schemas/LAStatusEnum'
        },
        remindBeforeDay: {
            type: 'integer',
            format: 'int32'
        },
        laCommencementDate: {
            type: 'string',
            format: 'date-time'
        },
        laExpirationDate: {
            type: 'string',
            format: 'date-time'
        },
        leaseTerm: {
            type: 'string',
            nullable: true
        },
        rentIncludeVAT: {
            type: 'number',
            format: 'double'
        },
        rent: {
            type: 'number',
            format: 'double'
        },
        serviceChargeIncludeVAT: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        serviceCharge: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        terminateOn: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LegalStatusEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const ListPriorityStatusEnumSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingFavoriteInputDtoSchema = {
    type: 'object',
    properties: {
        listingId: {
            type: 'string',
            nullable: true
        },
        isFavorite: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ListingFavoriteSearchQueryInputDtoSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        keyword: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        }
    },
    additionalProperties: false
} as const;

export const ListingLeaseTermEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingMarkAsVipInputDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        priority: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        }
    },
    additionalProperties: false
} as const;

export const ListingPackageEnumSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingPackageStatusEnumSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingPackageTypeEnumSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingPushStatusEnumSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingSearchQueryDtoSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        },
        projectIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        categoryIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        viewsIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bedrooms: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        bathrooms: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        fromPriceUsd: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        toPriceUsd: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        fromPriceVnd: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        toPriceVnd: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        priorityStatus: {
            '$ref': '#/components/schemas/ListPriorityStatusEnum'
        },
        fromSize: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        toSize: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        province: {
            type: 'string',
            nullable: true
        },
        district: {
            type: 'string',
            nullable: true
        },
        ward: {
            type: 'string',
            nullable: true
        },
        keyword: {
            type: 'string',
            nullable: true
        },
        currentLocation: {
            '$ref': '#/components/schemas/SearchLocationInputDto'
        },
        agencyId: {
            type: 'string',
            nullable: true
        },
        places: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SearchPlaceLocationInputDto'
            },
            nullable: true
        },
        inDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        outDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        handOverStatus: {
            '$ref': '#/components/schemas/HandOverStatusEnum'
        },
        legalStatus: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LegalStatusEnum'
            },
            nullable: true
        },
        leaseTerm: {
            '$ref': '#/components/schemas/ListingLeaseTermEnum'
        },
        isPetAllowance: {
            type: 'boolean',
            nullable: true
        },
        interiorIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        orderByCreatedTime: {
            type: 'boolean',
            nullable: true
        },
        contentLanguage: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        fromMoveDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toMoveDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        posterBrokerId: {
            type: 'string',
            nullable: true
        },
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const ListingStatusEnumSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 99, 100],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingTypeEnumSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const ListingUpdateActualPriceSchema = {
    type: 'object',
    properties: {
        listingId: {
            type: 'string',
            nullable: true
        },
        actualPrice: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ListingUpdateStatusDtoSchema = {
    required: ['id', 'status'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/ListingStatusEnum'
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LivingCostSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const LocationRequestSchema = {
    required: ['district', 'province', 'ward'],
    type: 'object',
    properties: {
        province: {
            minLength: 1,
            type: 'string'
        },
        district: {
            minLength: 1,
            type: 'string'
        },
        ward: {
            minLength: 1,
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LoginModelSchema = {
    type: 'object',
    properties: {
        userName: {
            type: 'string',
            nullable: true
        },
        password: {
            type: 'string',
            nullable: true
        },
        reCaptchaToken: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MaritalStatusSchema = {
    enum: [1, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const MaterialPlaceRequestSchema = {
    type: 'object',
    properties: {
        isDeleted: {
            type: 'boolean'
        },
        placeId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberRegisterDtoSchema = {
    required: ['accountType', 'email', 'phone'],
    type: 'object',
    properties: {
        password: {
            type: 'string',
            nullable: true
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        phone: {
            minLength: 1,
            type: 'string',
            format: 'tel'
        },
        email: {
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        accountType: {
            minLength: 1,
            type: 'string'
        },
        verifyCode: {
            type: 'string',
            nullable: true
        },
        referalCode: {
            type: 'string',
            nullable: true
        },
        ownershipType: {
            '$ref': '#/components/schemas/EnumOwnershipTypeNames'
        },
        extraInfo: {
            '$ref': '#/components/schemas/AppAccountExtraInfo'
        },
        authProvider: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        providerKey: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        providerAccessCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberRejectDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        rejectNote: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberUpdateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        base64String: {
            type: 'string',
            nullable: true
        },
        fax: {
            type: 'string',
            nullable: true
        },
        website: {
            type: 'string',
            nullable: true
        },
        serviceArea: {
            type: 'string',
            nullable: true
        },
        specialties: {
            type: 'string',
            nullable: true
        },
        aboutMe: {
            type: 'string',
            nullable: true
        },
        referalCode: {
            type: 'string',
            nullable: true
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        extraInfo: {
            '$ref': '#/components/schemas/AppAccountExtraInfo'
        },
        accountType: {
            type: 'string',
            nullable: true
        },
        userMaritalStatus: {
            '$ref': '#/components/schemas/MaritalStatus'
        },
        userEducationLvl: {
            '$ref': '#/components/schemas/EducationLevel'
        },
        userEmploymentStatus: {
            '$ref': '#/components/schemas/EmploymentStatus'
        },
        userOccupation: {
            '$ref': '#/components/schemas/Occupation'
        },
        userIncomeRank: {
            '$ref': '#/components/schemas/IncomeRange'
        },
        userReligion: {
            '$ref': '#/components/schemas/Religion'
        },
        userLivingCost: {
            '$ref': '#/components/schemas/LivingCost'
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const NotificationMethodSchema = {
    enum: [1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const NotificationTypeEnumSchema = {
    enum: [0, 1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const ObjectIdSchema = {
    type: 'object',
    properties: {
        timestamp: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        machine: {
            type: 'integer',
            format: 'int32',
            readOnly: true,
            deprecated: true
        },
        pid: {
            type: 'integer',
            format: 'int32',
            readOnly: true,
            deprecated: true
        },
        increment: {
            type: 'integer',
            format: 'int32',
            readOnly: true,
            deprecated: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const OccupationSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7],
    type: 'integer',
    format: 'int32'
} as const;

export const OwnerInfoDtoSchema = {
    type: 'object',
    properties: {
        clientName: {
            type: 'string',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const OwnerInquiryEnumSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const OwnerServiceAgreementEnumSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const OwnerServiceAgreentRequestSchema = {
    type: 'object',
    properties: {
        ownerServiceAgreementId: {
            type: 'string',
            nullable: true
        },
        commission: {
            type: 'number',
            format: 'double'
        },
        startDate: {
            type: 'string',
            format: 'date-time'
        },
        endDate: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PayMeCreateOrderInputDtoSchema = {
    required: ['failedUrl', 'successfullyUrl'],
    type: 'object',
    properties: {
        totalAmount: {
            maximum: 10000000,
            minimum: 10000,
            type: 'integer',
            format: 'int32'
        },
        paymentMethod: {
            '$ref': '#/components/schemas/PaymentMethod'
        },
        successfullyUrl: {
            minLength: 1,
            type: 'string'
        },
        failedUrl: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PayMeCustomerInfoSchema = {
    type: 'object',
    properties: {
        customerId: {
            type: 'string',
            nullable: true
        },
        swiftCode: {
            type: 'string',
            nullable: true
        },
        bankName: {
            type: 'string',
            nullable: true
        },
        number: {
            type: 'string',
            nullable: true
        },
        fullName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PayMeIPNInputDtoSchema = {
    type: 'object',
    properties: {
        transaction: {
            type: 'string',
            nullable: true
        },
        partnerTransaction: {
            type: 'string',
            nullable: true
        },
        paymentId: {
            type: 'string',
            nullable: true
        },
        merchantId: {
            type: 'integer',
            format: 'int32'
        },
        storeId: {
            type: 'integer',
            format: 'int32'
        },
        payMethod: {
            type: 'string',
            nullable: true
        },
        payCode: {
            type: 'string',
            nullable: true
        },
        amount: {
            type: 'integer',
            format: 'int32'
        },
        fee: {
            type: 'integer',
            format: 'int32'
        },
        total: {
            type: 'integer',
            format: 'int32'
        },
        state: {
            type: 'string',
            nullable: true
        },
        reason: {
            type: 'string',
            nullable: true
        },
        desc: {
            type: 'string',
            nullable: true
        },
        customerInfo: {
            '$ref': '#/components/schemas/PayMeCustomerInfo'
        },
        extraData: {
            type: 'string',
            nullable: true
        },
        metaData: {
            '$ref': '#/components/schemas/PayMeMetaData'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PayMeMetaDataSchema = {
    type: 'object',
    properties: {
        fullName: {
            type: 'string',
            nullable: true
        },
        swiftCode: {
            type: 'string',
            nullable: true
        },
        bankName: {
            type: 'string',
            nullable: true
        },
        number: {
            type: 'string',
            nullable: true
        },
        cardType: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PaymentMethodSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    type: 'integer',
    format: 'int32'
} as const;

export const PaymentRequestSchema = {
    type: 'object',
    properties: {
        depositAmount: {
            type: 'number',
            format: 'double'
        },
        depositStatus: {
            '$ref': '#/components/schemas/LADepositStatusEnum'
        },
        paymentTerm: {
            '$ref': '#/components/schemas/LAPaymentTermEnum'
        }
    },
    additionalProperties: false
} as const;

export const PrimaryKeyDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PropertySchema = {
    required: ['blockId', 'code', 'projectId', 'status', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        product_Type: {
            type: 'string',
            nullable: true
        },
        code: {
            minLength: 1,
            type: 'string'
        },
        number: {
            type: 'string',
            nullable: true
        },
        projectId: {
            minLength: 1,
            type: 'string'
        },
        blockId: {
            minLength: 1,
            type: 'string'
        },
        status: {
            minLength: 1,
            type: 'string'
        },
        lockStatus: {
            type: 'string',
            nullable: true
        },
        lockStatusBGColor: {
            type: 'string',
            nullable: true
        },
        rentStatus: {
            type: 'string',
            nullable: true
        },
        juridicalStatus: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        priceWithoutVAT: {
            type: 'number',
            format: 'double'
        },
        priceVAT: {
            type: 'number',
            format: 'double'
        },
        pricePerSquareMeter: {
            type: 'number',
            format: 'double'
        },
        maintainFee: {
            type: 'number',
            format: 'double'
        },
        percentMaintainFee: {
            type: 'number',
            format: 'double'
        },
        managementFee: {
            type: 'number',
            format: 'double'
        },
        landUseFee: {
            type: 'number',
            format: 'double'
        },
        price1: {
            type: 'number',
            format: 'double'
        },
        price2: {
            type: 'number',
            format: 'double'
        },
        vat: {
            type: 'number',
            format: 'double'
        },
        percentVAT: {
            type: 'number',
            format: 'double'
        },
        totalPrice: {
            type: 'number',
            format: 'double'
        },
        direction: {
            type: 'string',
            nullable: true
        },
        prescribedDepositAmount: {
            type: 'number',
            format: 'double'
        },
        apartment_KitchenDirection: {
            type: 'string',
            nullable: true
        },
        apartment_Floor: {
            type: 'string',
            nullable: true
        },
        apartment_OwnerShipStatus: {
            type: 'string',
            nullable: true
        },
        apartment_BuildArea: {
            type: 'number',
            format: 'double'
        },
        apartment_UsedArea: {
            type: 'number',
            format: 'double'
        },
        apartment_YardAreaNotCovered: {
            type: 'number',
            format: 'double'
        },
        apartment_BedRooms: {
            type: 'integer',
            format: 'int32'
        },
        apartment_RestRooms: {
            type: 'integer',
            format: 'int32'
        },
        apartment_BathRooms: {
            type: 'integer',
            format: 'int32'
        },
        apartment_Funiture: {
            type: 'string',
            nullable: true
        },
        apartment_View: {
            type: 'string',
            nullable: true
        },
        apartment_Balcony: {
            type: 'string',
            nullable: true
        },
        apartment_Laundry: {
            type: 'string',
            nullable: true
        },
        apartment_Type: {
            type: 'string',
            nullable: true
        },
        apartment_CarParking1: {
            type: 'string',
            nullable: true
        },
        apartment_CarParking1_Area: {
            type: 'number',
            format: 'double'
        },
        apartment_CarParking1_Price: {
            type: 'number',
            format: 'double'
        },
        apartment_CarParking2: {
            type: 'string',
            nullable: true
        },
        apartment_CarParking2_Area: {
            type: 'number',
            format: 'double'
        },
        apartment_CarParking2_Price: {
            type: 'number',
            format: 'double'
        },
        apartment_CarParking_Price: {
            type: 'number',
            format: 'double'
        },
        apartment_MotorbikeParking_Slot: {
            type: 'integer',
            format: 'int32'
        },
        apartment_Price3: {
            type: 'number',
            format: 'double'
        },
        apartment_Price01PerSM: {
            type: 'number',
            format: 'double'
        },
        apartment_CarParking_UsingOnly: {
            type: 'string',
            nullable: true
        },
        house_Floors: {
            type: 'integer',
            format: 'int32'
        },
        house_LandArea: {
            type: 'number',
            format: 'double'
        },
        house_BuildArea: {
            type: 'number',
            format: 'double'
        },
        house_FloorArea: {
            type: 'number',
            format: 'double'
        },
        house_BedRooms: {
            type: 'integer',
            format: 'int32'
        },
        house_RestRooms: {
            type: 'integer',
            format: 'int32'
        },
        house_BathRooms: {
            type: 'integer',
            format: 'int32'
        },
        house_Funiture: {
            type: 'string',
            nullable: true
        },
        house_UseFor: {
            type: 'string',
            nullable: true
        },
        house_Address: {
            type: 'string',
            nullable: true
        },
        house_FrontageWidth: {
            type: 'number',
            format: 'double'
        },
        house_EntranceWidth: {
            type: 'number',
            format: 'double'
        },
        house_PavementWidth: {
            type: 'number',
            format: 'double'
        },
        house_Longtitude: {
            type: 'string',
            nullable: true
        },
        house_Latitude: {
            type: 'string',
            nullable: true
        },
        house_BuildStatus: {
            type: 'string',
            nullable: true
        },
        house_Garage: {
            type: 'string',
            nullable: true
        },
        house_Type: {
            type: 'string',
            nullable: true
        },
        house_View: {
            type: 'string',
            nullable: true
        },
        villa_Floors: {
            type: 'integer',
            format: 'int32'
        },
        villa_Basements: {
            type: 'string',
            nullable: true
        },
        villa_LandArea: {
            type: 'number',
            format: 'double'
        },
        villa_BuildArea: {
            type: 'number',
            format: 'double'
        },
        villa_FloorArea: {
            type: 'number',
            format: 'double'
        },
        villa_GardernArea: {
            type: 'number',
            format: 'double'
        },
        villa_BedRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_RestRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_BathRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_Bars: {
            type: 'integer',
            format: 'int32'
        },
        villa_DiningRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_EntertainmentRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_WorkingRooms: {
            type: 'integer',
            format: 'int32'
        },
        villa_Pools: {
            type: 'integer',
            format: 'int32'
        },
        villa_Funiture: {
            type: 'string',
            nullable: true
        },
        villa_Address: {
            type: 'string',
            nullable: true
        },
        villa_FrontageWidth: {
            type: 'number',
            format: 'double'
        },
        villa_EntranceWidth: {
            type: 'number',
            format: 'double'
        },
        villa_PavementWidth: {
            type: 'number',
            format: 'double'
        },
        villa_Longtitude: {
            type: 'string',
            nullable: true
        },
        villa_Latitude: {
            type: 'string',
            nullable: true
        },
        villa_Garage: {
            type: 'string',
            nullable: true
        },
        villa_Type: {
            type: 'string',
            nullable: true
        },
        villa_View: {
            type: 'string',
            nullable: true
        },
        view: {
            type: 'string',
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        depositFormTemplateId: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        },
        isDelete: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        imageUrls: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        imageUrlsType: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        packageIndex: {
            type: 'string',
            nullable: true
        },
        errorMessage: {
            type: 'string',
            nullable: true
        },
        imageFiles: {
            type: 'array',
            items: {
                type: 'string',
                format: 'binary'
            },
            nullable: true
        },
        projectName: {
            type: 'string',
            nullable: true
        },
        projectCode: {
            type: 'string',
            nullable: true
        },
        blockName: {
            type: 'string',
            nullable: true
        },
        bookingInfo: {
            '$ref': '#/components/schemas/Booking'
        },
        careQuantity: {
            type: 'integer',
            format: 'int32'
        },
        apartment_BuildArea_String: {
            type: 'string',
            nullable: true
        },
        apartment_UsedArea_String: {
            type: 'string',
            nullable: true
        },
        import_Project: {
            type: 'string',
            nullable: true
        },
        import_Block: {
            type: 'string',
            nullable: true
        },
        import_ProductType: {
            type: 'string',
            nullable: true
        },
        import_Active: {
            type: 'string',
            nullable: true
        },
        import_Status: {
            type: 'string',
            nullable: true
        },
        import_LockStatus: {
            type: 'string',
            nullable: true
        },
        import_RentStatus: {
            type: 'string',
            nullable: true
        },
        import_JuridicalStatus: {
            type: 'string',
            nullable: true
        },
        import_OwnerShipStatus: {
            type: 'string',
            nullable: true
        },
        import_Direction: {
            type: 'string',
            nullable: true
        },
        import_Funiture: {
            type: 'string',
            nullable: true
        },
        import_UpdateNote: {
            type: 'string',
            nullable: true
        },
        import_DepositFormTemplate: {
            type: 'string',
            nullable: true
        },
        isHidden: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const PropertyInfoDtoSchema = {
    type: 'object',
    properties: {
        projectId: {
            type: 'string',
            nullable: true
        },
        unitId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ReligionSchema = {
    enum: [1, 2, 3, 4, 5, 6],
    type: 'integer',
    format: 'int32'
} as const;

export const ReportEcomInputDtoSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            nullable: true
        },
        password: {
            type: 'string',
            nullable: true
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Report_GetTopListingRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        },
        size: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const Report_ListingAreaAveragePriceRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        },
        province: {
            type: 'string',
            nullable: true
        },
        districts: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        wards: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        requestType: {
            type: 'string',
            nullable: true
        },
        listingCategories: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Report_ListingAreaBaseRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        },
        province: {
            type: 'string',
            nullable: true
        },
        districts: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        wards: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        requestType: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Report_ListingBaseRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Report_ListingCategoryRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        },
        listingCategories: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Report_ListingProjectRequestSchema = {
    type: 'object',
    properties: {
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingStatusEnum'
            },
            nullable: true
        },
        type: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ListingTypeEnum'
            },
            nullable: true
        },
        projectIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ResendOtpModelSchema = {
    type: 'object',
    properties: {
        phone: {
            type: 'string',
            nullable: true
        },
        typeOtp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ReviewSubmitListingDtoSchema = {
    required: ['applyId'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        applyId: {
            minLength: 1,
            type: 'string'
        },
        email: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        scoreDetail: {
            '$ref': '#/components/schemas/ScoreDetailDto'
        }
    },
    additionalProperties: false
} as const;

export const ReviewSubmitMemberDtoSchema = {
    required: ['applyId'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        applyId: {
            minLength: 1,
            type: 'string'
        },
        email: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        rating: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const SaleProgramSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        projects: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        projectsName: {
            type: 'string',
            nullable: true
        },
        agencies: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        agenciesName: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        isDelete: {
            type: 'boolean'
        },
        isApplyToCustomers: {
            type: 'boolean'
        },
        isBussinessGroup: {
            type: 'boolean'
        },
        isSpecifiedProduct: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        fromDate: {
            type: 'string',
            format: 'date-time'
        },
        toDate: {
            type: 'string',
            format: 'date-time'
        },
        bussinessGroup: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SaleProgramBussinessGroup'
            },
            nullable: true
        },
        product: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SaleProgramProduct'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SaleProgramBussinessGroupSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        headerId: {
            type: 'string',
            nullable: true
        },
        agencyId: {
            type: 'string',
            nullable: true
        },
        bussinessGroupId: {
            type: 'string',
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isDelete: {
            type: 'boolean'
        },
        packageIndex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SaleProgramProductSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        headerId: {
            type: 'string',
            nullable: true
        },
        propertyInfo: {
            '$ref': '#/components/schemas/Property'
        },
        property: {
            '$ref': '#/components/schemas/Property'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        updatedBy: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isDelete: {
            type: 'boolean'
        },
        packageIndex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ScoreDetailDtoSchema = {
    type: 'object',
    properties: {
        cleanliness: {
            type: 'number',
            format: 'double'
        },
        communication: {
            type: 'number',
            format: 'double'
        },
        checkIn: {
            type: 'number',
            format: 'double'
        },
        accuracy: {
            type: 'number',
            format: 'double'
        },
        location: {
            type: 'number',
            format: 'double'
        },
        value: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const SearchAmenitiesRequestSchema = {
    required: ['type'],
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        keyWord: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'array',
            items: {
                type: 'boolean'
            },
            nullable: true
        },
        type: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const SearchBaseRequestSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const SearchLocationInputDtoSchema = {
    type: 'object',
    properties: {
        lat: {
            type: 'number',
            format: 'double'
        },
        lng: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const SearchNotificationRequestSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        method: {
            '$ref': '#/components/schemas/NotificationMethod'
        },
        notiType: {
            '$ref': '#/components/schemas/NotificationTypeEnum'
        }
    },
    additionalProperties: false
} as const;

export const SearchPlaceLocationInputDtoSchema = {
    type: 'object',
    properties: {
        distance: {
            type: 'number',
            format: 'double'
        },
        id: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SearchPlaceTypeSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93],
    type: 'integer',
    format: 'int32'
} as const;

export const SearchProjectLandingPageRequestSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        keyword: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SearchTransactionDtoSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        keyword: {
            type: 'string',
            nullable: true
        },
        userId: {
            type: 'string',
            nullable: true
        },
        userTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnumOrderStatus'
            },
            nullable: true
        },
        paymentMethods: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SearchVatConfigRequestSchema = {
    type: 'object',
    properties: {
        from: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            maximum: 5000,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SetNewPasswordModelSchema = {
    required: ['password', 'phone'],
    type: 'object',
    properties: {
        phone: {
            minLength: 1,
            type: 'string'
        },
        password: {
            maxLength: 100,
            minLength: 6,
            type: 'string',
            format: 'password'
        },
        verifyCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SortOrderSchema = {
    enum: [0, 1],
    type: 'integer',
    format: 'int32'
} as const;

export const SourceSchema = {
    type: 'object',
    properties: {
        includes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        excludes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SubscriberDtoSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TopUpRequestDtoSchema = {
    required: ['userId'],
    type: 'object',
    properties: {
        userId: {
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        description: {
            maxLength: 2000,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        totalAmount: {
            maximum: 100000000,
            minimum: 10000,
            type: 'number',
            format: 'double'
        },
        vatAmount: {
            type: 'number',
            format: 'double'
        },
        baseAmount: {
            type: 'number',
            format: 'double'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        paymentChannel: {
            '$ref': '#/components/schemas/EnumFeePaymentChannel'
        }
    },
    additionalProperties: false
} as const;

export const TopUpTestDtoSchema = {
    type: 'object',
    properties: {
        totalAmount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const TopUpUpdateStatusDtoSchema = {
    required: ['id', 'status'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/FeeTopUpStatusEnum'
        }
    },
    additionalProperties: false
} as const;

export const UnitStatusSchema = {
    enum: [1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const UpdateAppAccountStatusSingleSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UpdateConfigPaymentRequestSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        paymentMethod: {
            type: 'string',
            nullable: true
        },
        feeTransactionPercent: {
            type: 'number',
            format: 'double'
        },
        feeTransactionVAT: {
            type: 'number',
            format: 'double'
        },
        fixFee: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const UpdateCorporateRequestSchema = {
    type: 'object',
    properties: {
        corporateUserName: {
            type: 'string',
            nullable: true
        },
        corporateEmail: {
            type: 'string',
            nullable: true
        },
        corporateCompanyName: {
            type: 'string',
            nullable: true
        },
        corporateCode: {
            type: 'string',
            nullable: true
        },
        corporateAddress: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateDataWithFilesSchema = {
    type: 'object',
    properties: {
        files: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileInfor'
            },
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateLARequestSchema = {
    required: ['id', 'personInChargeId'],
    type: 'object',
    properties: {
        personInChargeId: {
            minLength: 1,
            type: 'string'
        },
        inquiryDetail: {
            '$ref': '#/components/schemas/InquiryDetailRequest'
        },
        contactDetail: {
            '$ref': '#/components/schemas/ContactDetailRequest'
        },
        leaseExecution: {
            '$ref': '#/components/schemas/LeaseExecutionRequest'
        },
        payment: {
            '$ref': '#/components/schemas/PaymentRequest'
        },
        id: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateListingPackageRequestSchema = {
    required: ['package', 'packageType', 'type'],
    type: 'object',
    properties: {
        package: {
            '$ref': '#/components/schemas/ListingPackageEnum'
        },
        packageType: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        },
        point: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/ListingPackageStatusEnum'
        },
        numberOfPush: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        percentDecrease: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int64'
        },
        id: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateListingPushRequestSchema = {
    required: ['id', 'packageType'],
    type: 'object',
    properties: {
        packageType: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        point: {
            minimum: 0,
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/ListingPushStatusEnum'
        },
        numberOfPush: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const UpdateListingRequestSchema = {
    required: ['bedrooms', 'description', 'id', 'listingCategoryId', 'location', 'posterRoleCode', 'priceVnd', 'priceVndM2', 'projectId', 'size', 'title', 'type'],
    type: 'object',
    properties: {
        title: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateListingTranslationRequest'
            }
        },
        description: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateListingTranslationRequest'
            }
        },
        priceVnd: {
            type: 'number',
            format: 'double'
        },
        priceVndM2: {
            type: 'number',
            format: 'double'
        },
        size: {
            type: 'number',
            format: 'double'
        },
        unitId: {
            type: 'string',
            nullable: true
        },
        isShowUnitCode: {
            type: 'boolean'
        },
        listingCategoryId: {
            minLength: 1,
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/ListingTypeEnum'
        },
        status: {
            '$ref': '#/components/schemas/ListingStatusEnum'
        },
        bedrooms: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        bathrooms: {
            maximum: 100,
            minimum: 0,
            type: 'integer',
            format: 'int32',
            default: 1,
            nullable: true
        },
        expectedPublishingDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        handOverStatus: {
            '$ref': '#/components/schemas/HandOverStatusEnum'
        },
        legalStatus: {
            '$ref': '#/components/schemas/LegalStatusEnum'
        },
        viewsIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        projectId: {
            minLength: 1,
            type: 'string'
        },
        location: {
            '$ref': '#/components/schemas/LocationRequest'
        },
        videoLink: {
            type: 'string',
            nullable: true
        },
        virtualTour: {
            type: 'string',
            nullable: true
        },
        displayPriceType: {
            '$ref': '#/components/schemas/DisplayPriceTypeEnum'
        },
        posterRoleCode: {
            minLength: 1,
            type: 'string'
        },
        interiorId: {
            type: 'string',
            nullable: true
        },
        blockTower: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        floor: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        inDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        outDoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        nearBy: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        priorityStatus: {
            '$ref': '#/components/schemas/ListingPackageTypeEnum'
        },
        autoPushDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        leaseTerm: {
            '$ref': '#/components/schemas/ListingLeaseTermEnum'
        },
        isPetAllowance: {
            type: 'boolean',
            nullable: true
        },
        managementFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        isIncludeManagementFee: {
            type: 'boolean',
            nullable: true
        },
        canMoveInAfter: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        imageIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        id: {
            minLength: 1,
            type: 'string'
        },
        imageIdsDelete: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        rePost: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isReSubmit: {
            type: 'boolean'
        },
        expiredDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateOSARequestSchema = {
    required: ['personInChargeId'],
    type: 'object',
    properties: {
        ownerServiceAgreementId: {
            type: 'string',
            nullable: true
        },
        ownerInquiryId: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ownerInfo: {
            '$ref': '#/components/schemas/OwnerInfoDto'
        },
        propertyInfo: {
            '$ref': '#/components/schemas/PropertyInfoDto'
        },
        agreementInfo: {
            '$ref': '#/components/schemas/AgreementInfoDto'
        },
        personInChargeId: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const UpdateOwnerInquiryRequestSchema = {
    required: ['id', 'personInChargeId', 'status'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/OwnerInquiryEnum'
        },
        visitDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ownerInfo: {
            '$ref': '#/components/schemas/OwnerInfoDto'
        },
        personInChargeId: {
            minLength: 1,
            type: 'string'
        },
        osaInfo: {
            '$ref': '#/components/schemas/OwnerServiceAgreentRequest'
        }
    },
    additionalProperties: false
} as const;

export const UpdateProjectRequestSchema = {
    required: ['code', 'location', 'name'],
    type: 'object',
    properties: {
        code: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        descriptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateDescriptionTranslationRequest'
            },
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        managedBy: {
            type: 'string',
            nullable: true
        },
        owner: {
            type: 'string',
            nullable: true
        },
        yearBuited: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        handOverYear: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        totalArea: {
            type: 'number',
            format: 'double'
        },
        isActive: {
            type: 'boolean'
        },
        numberOfFloor: {
            type: 'integer',
            format: 'int32'
        },
        numberOfUnit: {
            type: 'integer',
            format: 'int32'
        },
        location: {
            '$ref': '#/components/schemas/LocationRequest'
        },
        indoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        outdoorAmenities: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        nearBy: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        unitTypeRentIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        unitTypeSellIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        imageIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        imageLogoId: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        },
        imageIdsDelete: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdatePropertyCodeSchema = {
    required: ['code', 'id'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        code: {
            minLength: 1,
            type: 'string'
        },
        updatedBy: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateSearchLocationRequestSchema = {
    required: ['district', 'materialPlaces', 'province', 'status', 'type'],
    type: 'object',
    properties: {
        province: {
            minLength: 1,
            type: 'string'
        },
        district: {
            minLength: 1,
            type: 'string'
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        status: {
            type: 'boolean'
        },
        materialPlaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MaterialPlaceRequest'
            }
        },
        id: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateUnitRequestSchema = {
    required: ['projectId'],
    type: 'object',
    properties: {
        projectId: {
            minLength: 1,
            type: 'string'
        },
        typeId: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/UnitStatus'
        },
        viewId: {
            type: 'string',
            nullable: true
        },
        unitNo: {
            type: 'string',
            nullable: true
        },
        area: {
            type: 'number',
            format: 'double'
        },
        floor: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateUnitDescriptionTranslationRequest'
            },
            nullable: true
        },
        unitMothlyMgtFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        unitYearBuild: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        unitOutdoorSpace: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VatConfigRequestSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        vatAmount: {
            type: 'number',
            format: 'double'
        },
        fromDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        toDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VerificationRequestSchema = {
    type: 'object',
    properties: {
        phone: {
            type: 'string',
            nullable: true
        },
        requestType: {
            type: 'string',
            nullable: true
        },
        method: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VerificationSubmitSchema = {
    type: 'object',
    properties: {
        phone: {
            type: 'string',
            nullable: true
        },
        otp: {
            type: 'string',
            nullable: true
        },
        verifyFor: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VerifyOtpModelSchema = {
    type: 'object',
    properties: {
        phone: {
            type: 'string',
            nullable: true
        },
        verifyCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;